
[DFTBaby]
############################################
# LC-TD-DFTB SETTINGS
#
# to get a full list of options run
#   LR_TDDFTB.py --help
############################################

# tighter convergence 
scf_conf=1e-14
# disable DIIS mixer
density_mixer=None

long_range_correction=0


[SurfaceHopping]
############################################
# DYNAMICS SETTINGS
#
# to get a full list of options run
#   SurfaceHopping.py --help
#
############################################

# number of nuclear steps
nstep = 1000

# length of nuclear time step for integration of Newton's equations (in fs).
nuclear_step = 0.1

# dynamics mode:
#
#   -   'E' for constant energy
#     Non-adiabatic dynamics on excited states should be run at constant energy.
#
#   -   'T' for constant temperature
#     To equilibrate a trajectory on the ground state use 'T'.
#
#   -   'M' for metadynamics
#     Metadynamics is run at constant temperature but a time-dependent bias potential is added
#     in regular intervals. Metadynamics requires an additional input file called
#     'meta-config.py' with the definitions of the colective variables. An example configuration
#     file can be found in 'DFTB/MetaDynamics/meta-config.py'.
#
dyn_mode = "E"    

# temperature in Kelvin, only needed if the dynamics is run at constant temperature
temp = 300.0

# The temperature is controlled using a Berendsen thermostat. To reach the set temperature
# T0 from the current temperature T, in each time step of duration dt, the velocities v
# are rescaled by a factor s, that is given by
#
#                dt   T0
#   s = sqrt(1 + --- (--- - 1) )
#                tau   T
#
# timecoupling `tau` in fs
timecoupling = 1.0

# Energy conservation can be enforced artificially by rescaling the velocities after each
# time step. This avoids the drift of the total energy observed for long dynamics simulations.
# This option only takes effect if dyn_mode="E"
artificial_energy_conservation = 0


# SPECIES AND ELECTRONIC STATE SETTINGS

# total charge of the molecule, the cation or anion has to be a closed shell species for TD-DFTB to work properly.
charge=0

# initial electronic state of the trajectory, 0 for ground state.
#
# Instead of specifying the index of the initial state explicitly, let the program choose the excited
# state with the highest oscillator strength as the initially photoexcited state by setting
# initial_state = "brightest"
#
initial_state = 0

# number of excited states. Only the lowest states are calculated with TD-DFTB.
# For dynamics in the ground state `nstates` should be set to 0 to avoid the
# expensive calculation of excitation energies and non-adiabatic couplings.
nstates = 2


# NON-ADIABATIC COUPLING SETTINGS

# Excitation coefficients that are smaller than this threshold are neglected
# when calculating scalar couplings from the overlap between electronic states
# at successive time steps. For large molecules this value should be reduced.
scalar_coupling_threshold=0.01

# If  `switch_to_groundstate` is set to 1, a hop to the ground state is forced
# if the S0-S1 energy gap drops below 0.1 eV.
# In TD-DFT(B) conical intersections to the ground state are not described correctly.
# If a point of point of degeneracy between S0 and S1 is reached, the TD-DFT(B) calculation usually breaks down. 
# If something goes wrong in the excited state calculation, the trajectory continues with the
# ground state gradients until the excited state calculation starts working again.
switch_to_groundstate = 1



# TIME SERIES

# To better analyze trajectories it is helpful to write out time series of additional quantities
# along the trajectory. You can specify a list of the desired quantities. 
# Available quantities so far:
#
#   'particle-hole charges'           :   ph charges of excited state I are weighted by quantum populations |C(I)|^2,
#                                         particle charges are positive (more electrons), while hole charges are negative (less electrons) !
#   'particle-hole charges current'   :   ph charges of the current electronic state
#   'Lambda2 current'                 :   Lambda2 descriptor of the current electronic state (0 - CT, 1 - LE). If the trajectory is
#                                         in the ground state, Lambda2 is set to -1, since the descriptor is only defined for excited states.
#   'Lambda2'                         :   Lambda2 descriptor for all excited states
#   'transition charges current'      :   transition charges between ground state and current excited state. If the trajectory is in the
#                                         ground state, the charges are set to 0.
#
# The time series are written to files in the current directory (e.g. 'particle_hole_charges.xyz').   


# time_series= ['particle-hole charges current', 'Lambda2 current', 'Lambda2', 'transition charges current']
time_series = []    


# Output is written to disk only for every N'th time step by setting `output_step=N`.
# For large molecules and long propagation times the amount of output will be huge
# and might fill up the disk if every time step is written out.
output_step = 1


# decoherence correction according to eqn. (17) in
#     G. Granucci, M. Persico,
#     "Critical appraisal of the fewest switches algorithm for surface hopping",
#     J. Chem. Phys. 126, 134114 (2007)
# If the trajectory is in the current state K, the coefficients of the other 
# states J != K are made to decay exponentially, C'_J = exp(-dt/tau_JK) C_J.
# The decay time tau_JK is proportional to the inverse of the energy gap |E_J-E_K|,
# so that the coherences C_J*C_K decay very quickly if the energy gap between
# the two states is large. This alleviates the problem of overcoherence, which
# leads to wrong populations in the case of weak couplings and multiple passage
# through regions of strong coupling.
#
# To turn correction on set this option to 1.
decoherence_correction = 0     


[GeometryOptimization]
############################################
# GEOMETRY OPTIMIZATION SETTINGS
#
# to get a full list of options run
#   GeometryOptimization.py --help
#
############################################

# index of electronic state to be optimized (0 - ground state, 1 - first excited state)
state=0

# Should the hessian matrix be computed (1) or not (0)? If yes, the Hessian matrix is saved to the file 'hessian.dat' and the vibrational modes and frequencies are saved to the file 'vib.molden' that can be visualized with the Molden program.
calc_hessian=0

# The optimization can be performed either directly in cartesian coordinate ('cartesian')
# or in redundant internal coordinates ('internal'). Cartesian coordinates are more reliable
# but make it difficult to converge to the minimum in a floppy molecule.
# Internal coordinates don't work for disconnected fragments and require a starting geometry
# with the correct atom connectivity.
coord_system=cartesian

# The optimization is finished as soon as the norm of the gradient is smaller than this threshold.
grad_tol=1.0e-5

# The optimization is finished as soon as the energy does not change more than this threshold.
func_tol=1.0e-8

# Maximum number of optimization steps.
max_steps=100000

# Choose the optimization algorithm. 'Newton', 'Steepest Descent' and 'BFGS' have their own implementations, 'CG' requests scipy's conjugate gradient method.
method=CG


